shpdata$quad_sigColor <- factor(shpdata$quad_sigColor, levels = c(levels(shpdata$quad_sigColor),
colors[!colors %in% levels(shpdata$quad_sigColor)]))
shpdata$quad_sigColor <- factor(shpdata$quad_sigColor, levels = colors)
## plots moran plotshpdata
Fig5 <- ggplot(moranplotshpdata, aes(x = x, y = wx)) +
geom_point(shape = 1, size = 2) +
geom_hline(yintercept = mean(moranplotshpdata$wx), lty = 2) +
geom_vline(xintercept = mean(moranplotshpdata$x), lty = 2) +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE, color = "black") +
geom_point(data = moranplotshpdata[moranplotshpdata$is_inf == TRUE, ],
aes(x = x, y = wx), size = 2.5) +
geom_text(data = moranplotshpdata[moranplotshpdata$is_inf == TRUE, ],
check_overlap = TRUE,
vjust = 1.5,
aes(label = labels)) +
xlab("Frequency of disease events (standardized)") +
ylab("Spatially lagged frequency of disease events") +
theme_minimal()
ggsave(Fig5, filename = "Fig5.png", dpi = 300)
### Plot Moran's I p-value
Fig6 <- ggplot(data = shpdata) +
geom_sf(data = shpsfort, fill = "white", color = "white") +
geom_sf(aes(fill = Prob), color = "black") +
coord_sf(xlim = c(min(shpdatacoords[,'X']), max(shpdatacoords[,'X'])), ylim = c(min(shpdatacoords[,'Y']), max(shpdatacoords[,'Y'])),
datum = NA, expand = FALSE) +
scale_fill_gradient2(low = "#009E73", mid = "#F0E442", high = "white",
midpoint = 0.1,
na.value = "white",
limits = c(0, 0.2)) +
annotation_north_arrow(aes(location = "bl")) +
annotation_scale(aes(location = "br")) +
labs(fill = "Local Moran's I \n p-value") +
theme_minimal()
ggsave(Fig6, filename = "Fig6.png", dpi = 300)
Fig7 <- ggplot(data = shpdata) +
geom_sf(data = shpsfort, fill = "white", color = "grey") +
geom_sf(aes(fill = quad_sig), color = "black") +
coord_sf(xlim = c(min(shpdatacoords[,'X']), max(shpdatacoords[,'X'])), ylim = c(min(shpdatacoords[,'Y']), max(shpdatacoords[,'Y'])),
datum = NA, expand = FALSE) +
scale_fill_manual(values = colors[labels %in% unique(shpdata$quad_sig)]) +
#geom_sf_label(data = shpdata[shpdata$quad_sig != "Not Significant" & shpdata$quad_sig != "Missing data", ],
#              aes(label = name),
#              label.size = NA,
#              fill = NA) +
annotation_north_arrow(aes(location = "bl")) +
annotation_scale(aes(location = "br")) +
labs(fill = "LISA Cluster") +
theme_minimal()
ggsave(Fig7, filename = "Fig7.png", dpi = 300)
GeoOutbreaks <- shpdata[, c("iso3", "region", "continent", "name", "french_shor", "freq", "geometry")]
save(GeoOutbreaks, file = "GeoOutbreaks.RData")
Fig7
### Packages ###
require("foreign")
require("reshape")
require("ggspatial")
require("tidyverse")
require("plyr")
require("sf")
require("ggmap")
require("spdep")
require("ggthemes")
require("rgdal")
############################### Information on outbreaks104c ###############################
## load data ##
load("Outbreaks.RData")
outbreaks <- Outbreaks[Outbreaks$Year < 2022, ]
outbreaks <- outbreaks %>%
mutate(Ones = 1)
outbreaks104c <- outbreaks %>%
cast(Country + iso3 + Year ~ icd104c, value = "Ones", fun.aggregate = sum)
outbreaks104c <- outbreaks104c %>%
mutate(Freq =
outbreaks104c %>%
select(where(is.numeric)) %>%
rowSums)
## GIS information ##
shpsf <- read_sf("GeoData/world-administrative-boundaries.shp")
# https://public.opendatasoft.com/explore/dataset/world-administrative-boundaries/export/
shpsf <- shpsf %>%
filter(continent != "Antarctica")
## The sum of frequencies of diseases all years per Country ##
diseases <- outbreaks104c %>%
cast(iso3 + Country ~ ., value = "Freq", fun.aggregate = sum)
colnames(diseases)[colnames(diseases) %in% "(all)"] <- "freq"
# Joining diseases data with shapefile
shpsf[!is.na(shpsf$iso3) & shpsf$iso3 == "IMY", "iso3"] <- "IMN"
shpsf[!is.na(shpsf$name) & shpsf$name == "Jersey", "iso3"] <- "JEY"
shpdata <- shpsf %>%
merge(na.omit(diseases), by = "iso3", all.x = TRUE)
shpdata[shpdata$name == "Gaza Strip", "freq"] <- diseases[diseases$Country == "Palestine State of", "freq"]
shpdata <- shpdata[!is.na(shpdata$freq), ]
shpdata <- shpdata[!is.na(shpdata$iso3), ]
# histogram #
ggplot(shpdata, aes(freq)) +
geom_density(aes(fill = continent),
show.legend = FALSE) +
xlab("Total frequency of outbreaks \n (1996 - 2021)") +
ylab("Density") +
facet_wrap(~ continent) +
theme_minimal()
######
knitr::opts_chunk$set(echo = TRUE)
options(prompt = "R> ", digits = 4, scipen = 999)
######################
# World
#####################
shpsfort <- fortify(shpsf)
shpdatacoords <- as.data.frame(st_coordinates(shpdata))
Fig3 <- ggplot(data = shpdata) +
geom_sf(data = shpsfort, fill = "white", color = "#999999") +
geom_sf(aes(fill = freq), color = "black") +
coord_sf(xlim = c(min(shpdatacoords[,'X']), max(shpdatacoords[,'X'])), ylim = c(min(shpdatacoords[,'Y']), max(shpdatacoords[,'Y'])),
datum = NA, expand = FALSE) +
scale_fill_continuous(low = "white", high = "#E69F00") +
annotation_north_arrow(aes(location = "bl")) +
annotation_scale(aes(location = "br")) +
labs(fill = "Frequency") +
theme_minimal()
ggsave(Fig3, filename = "Fig3.png", dpi = 300)
## barplots ##
# by country #
bycountry <- shpdata[order(-shpdata$freq),]
rownames(bycountry) <- 1:nrow(bycountry)
Fig4a <- ggplot(bycountry[1:20, ], aes(y = freq, x = reorder(name, -freq), fill = continent)) +
geom_bar(stat = "identity") +
scale_fill_colorblind() +
scale_x_discrete(labels = function(x) str_wrap(x, width = 20)) +
ylab("Total frequency of outbreaks \n (1996 - 2021)") +
xlab("Country") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ggsave(Fig4a, filename = "Fig4a.png", dpi = 300)
# by disease #
bydisease <- cast(outbreaks[, c("Disease", "Ones")], Disease ~ ., fun.aggregate = sum)
colnames(bydisease)[2] <- "freq"
bydisease <- bydisease[order(-bydisease$freq), ]
bydisease$Disease <- as.factor(bydisease$Disease)
levels(bydisease$Disease) <- gsub(" ", "\n", levels(bydisease$Disease))
rownames(bydisease) <- 1:nrow(bydisease)
Fig4b <- ggplot(bydisease[1:20, ], aes(y = freq, x = reorder(Disease, -freq))) +
geom_bar(stat = "identity") +
scale_fill_colorblind() +
scale_x_discrete(labels = function(x) str_wrap(x, width = 30)) +
ylab("Total frequency of outbreaks \n (1996 - 2021)") +
xlab("Disease") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ggsave(Fig4b, filename = "Fig4b.png", dpi = 300)
# by Year #
byYear <- cast(outbreaks[, c("Year", "Ones")], Year ~ ., fun.aggregate = sum)
colnames(byYear)[2] <- "freq"
byYear <- byYear[order(-byYear$freq), ]
byYear$Year <- as.factor(byYear$Year)
Fig4c <- ggplot(byYear, aes(y = freq, x = Year)) +
geom_bar(stat = "identity") +
scale_fill_colorblind() +
ylab("Total frequency of outbreaks \n (1996 - 2021)") +
xlab("Year") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))
ggsave(Fig4c, filename = "Fig4c.png", dpi = 300)
### ESDA ###
neighbourstrshpdata <- poly2nb(shpdata, queen = FALSE)
neighbourstrshpdata
## Calculating the spatial autocorrelation ##
shpdata$sfreq <- as.vector(scale(shpdata$freq, center = TRUE, scale = TRUE))
summary(shpdata$freq)
## Neighbourhood structure of the countries as list ##
# , the use of a variance-stabilising coding scheme has been proposed by Tiefelsdorf et al. (1999) and is provided
# as style="S". The weights vary, less than for style="W", but the row sums of weights by area vary more than
# for style="W" (where they are alway unity) and less than for styles B, C, or U. This style also makes asymmetric
# weights, but as with style="W", they may be similar to symmetric if the neighbours list was itself symmetric.
listneshpdatas <- nb2listw(neighbourstrshpdata, zero.policy = TRUE, style = "S")
######################
# Moranâ€™s I test
#####################
morangshpdata <- moran.test(shpdata$sfreq, listneshpdatas, zero.policy = TRUE)
morangshpdata
# Interpretation
# Are data clustered, dispersed, or random distributed in the geographic space?
# Null hypothesis: data are completely randomly distributed
# if Null is rejected, then:
# a) Positive Moran I statistic -> more spatially clustered than randomly distributed
# b) Negative Moran I statistic -> more spatially dispersed than randomly distributed
# Moran I statistic standard deviate = 6.1, p-value = 0.0000000005
# alternative hypothesis: greater
# sample estimates:
#  Moran I statistic       Expectation          Variance
#           0.335974         -0.006289          0.003124
## Monte-Carlo simulation of Moran's I
moranmcshpdata <- moran.mc(shpdata$sfreq, listneshpdatas, nsim = 999, zero.policy = TRUE)
## Plot of Moran's I
moranplotshpdata <- moran.plot(shpdata$sfreq, listneshpdatas,
labels = as.character(shpdata$name), zero.policy = TRUE,
xlab = "Frequency of disease events (standardized)", ylab = "Lag frequency")
## Local Moran
moranlshpdata <- localmoran(shpdata$sfreq, listneshpdatas, zero.policy = TRUE)
colnames(moranlshpdata)[5] <- "Prob"
shpdata <- cbind(shpdata, moranlshpdata)
shpdata$lagsfreq <- lag.listw(var = shpdata$sfreq, x = listneshpdatas, zero.policy = TRUE)
## Map of local Moran
shpdata$quad_sig <- "Missing data"
shpdata[(shpdata$sfreq >= 0 & shpdata$lagsfreq >= 0) & (!is.na(shpdata$Prob) & shpdata$Prob <= 0.01), "quad_sig"] <- "High-High"
shpdata[(shpdata$sfreq <= 0 & shpdata$lagsfreq <= 0) & (!is.na(shpdata$Prob) & shpdata$Prob <= 0.01), "quad_sig"] <- "Low-Low"
shpdata[(shpdata$sfreq >= 0 & shpdata$lagsfreq <= 0) & (!is.na(shpdata$Prob) & shpdata$Prob <= 0.01), "quad_sig"] <- "High-Low"
shpdata[(shpdata$sfreq <= 0 & shpdata$lagsfreq >= 0) & (!is.na(shpdata$Prob) & shpdata$Prob <= 0.01), "quad_sig"] <- "Low-High"
shpdata[(!is.na(shpdata$Prob) & shpdata$Prob >= 0.01), "quad_sig"] <- "Not Significant"
# assign a 5 to a non-significant observations
shpdata$quad_sigColor <- "white"
shpdata[(shpdata$sfreq >= 0 & shpdata$lagsfreq >= 0) & (!is.na(shpdata$Prob) & shpdata$Prob <= 0.01), "quad_sigColor"] <- "#D55E00"
shpdata[(shpdata$sfreq <= 0 & shpdata$lagsfreq <= 0) & (!is.na(shpdata$Prob) & shpdata$Prob <= 0.01), "quad_sigColor"] <- "#0072B2"
shpdata[(shpdata$sfreq >= 0 & shpdata$lagsfreq <= 0) & (!is.na(shpdata$Prob) & shpdata$Prob <= 0.01), "quad_sigColor"] <- "#CC79A7"
shpdata[(shpdata$sfreq <= 0 & shpdata$lagsfreq >= 0) & (!is.na(shpdata$Prob) & shpdata$Prob <= 0.01), "quad_sigColor"] <- "#56B4E9"
shpdata[(!is.na(shpdata$Prob) & shpdata$Prob >= 0.01), "quad_sigColor"] <- "grey94"
# set the corresponding labels for the thematic map classes
labels <- c("High-High", "Low-Low", "High-Low", "Low-High", "Not Significant", "Missing data")
# assign colors to each map class
colors <- as.character(c("#D55E00", "#0072B2", "#CC79A7", "#56B4E9", "grey94", "white"))
shpdata$quad_sig <- as.factor(shpdata$quad_sig)
shpdata$quad_sig <- factor(shpdata$quad_sig, levels = c(levels(shpdata$quad_sig), labels[!labels %in% levels(shpdata$quad_sig)]))
shpdata$quad_sig <- factor(shpdata$quad_sig, levels = labels)
shpdata$quad_sigColor  <- as.factor(shpdata$quad_sigColor)
shpdata$quad_sigColor <- factor(shpdata$quad_sigColor, levels = c(levels(shpdata$quad_sigColor),
colors[!colors %in% levels(shpdata$quad_sigColor)]))
shpdata$quad_sigColor <- factor(shpdata$quad_sigColor, levels = colors)
## plots moran plotshpdata
Fig5 <- ggplot(moranplotshpdata, aes(x = x, y = wx)) +
geom_point(shape = 1, size = 2) +
geom_hline(yintercept = mean(moranplotshpdata$wx), lty = 2) +
geom_vline(xintercept = mean(moranplotshpdata$x), lty = 2) +
geom_smooth(formula = y ~ x, method = "lm", se = FALSE, color = "black") +
geom_point(data = moranplotshpdata[moranplotshpdata$is_inf == TRUE, ],
aes(x = x, y = wx), size = 2.5) +
geom_text(data = moranplotshpdata[moranplotshpdata$is_inf == TRUE, ],
check_overlap = TRUE,
vjust = 1.5,
aes(label = labels)) +
xlab("Frequency of disease events (standardized)") +
ylab("Spatially lagged frequency of disease events") +
theme_minimal()
ggsave(Fig5, filename = "Fig5.png", dpi = 300)
### Plot Moran's I p-value
Fig6 <- ggplot(data = shpdata) +
geom_sf(data = shpsfort, fill = "white", color = "white") +
geom_sf(aes(fill = Prob), color = "black") +
coord_sf(xlim = c(min(shpdatacoords[,'X']), max(shpdatacoords[,'X'])), ylim = c(min(shpdatacoords[,'Y']), max(shpdatacoords[,'Y'])),
datum = NA, expand = FALSE) +
scale_fill_gradient2(low = "#009E73", mid = "#F0E442", high = "white",
midpoint = 0.1,
na.value = "white",
limits = c(0, 0.2)) +
annotation_north_arrow(aes(location = "bl")) +
annotation_scale(aes(location = "br")) +
labs(fill = "Local Moran's I \n p-value") +
theme_minimal()
ggsave(Fig6, filename = "Fig6.png", dpi = 300)
Fig7 <- ggplot(data = shpdata) +
geom_sf(data = shpsfort, fill = "white", color = "grey") +
geom_sf(aes(fill = quad_sig), color = "black") +
coord_sf(xlim = c(min(shpdatacoords[,'X']), max(shpdatacoords[,'X'])), ylim = c(min(shpdatacoords[,'Y']), max(shpdatacoords[,'Y'])),
datum = NA, expand = FALSE) +
scale_fill_manual(values = colors[labels %in% unique(shpdata$quad_sig)]) +
#geom_sf_label(data = shpdata[shpdata$quad_sig != "Not Significant" & shpdata$quad_sig != "Missing data", ],
#              aes(label = name),
#              label.size = NA,
#              fill = NA) +
annotation_north_arrow(aes(location = "bl")) +
annotation_scale(aes(location = "br")) +
labs(fill = "LISA Cluster") +
theme_minimal()
ggsave(Fig7, filename = "Fig7.png", dpi = 300)
GeoOutbreaks <- shpdata[, c("iso3", "region", "continent", "name", "french_shor", "freq", "geometry")]
save(GeoOutbreaks, file = "GeoOutbreaks.RData")
Fig7
Fig7 +
coord_sf(
xlim = c(21, 27),
ylim = c(112.6, 116.4),
expand = FALSE
)
Fig7 +
coord_sf(
xlim = c(112.6, 116.4),
ylim = c(21, 27),
expand = FALSE
)
Fig7 +
coord_sf(
xlim = c(110, 120),
ylim = c(21, 27),
expand = FALSE
)
Fig7 +
coord_sf(
xlim = c(113, 115),
ylim = c(22, 23),
expand = FALSE
)
Fig7 %>%
ggdraw() +
draw_plot(
{
main_map +
coord_sf(
xlim = c(113, 115),
ylim = c(22, 23),
expand = FALSE) +
annotation_north_arrow(aes(location = "none")) +
annotation_scale(aes(location = "none")) +
theme_minimal(legend.position = "none")
},
x = 0.58,
y = 0,
width = 0.46,
height = 0.46)
require("cowplot")
install.packages("cowplot")
require("cowplot")
Fig7 %>%
ggdraw() +
draw_plot(
{
main_map +
coord_sf(
xlim = c(113, 115),
ylim = c(22, 23),
expand = FALSE) +
annotation_north_arrow(aes(location = "none")) +
annotation_scale(aes(location = "none")) +
theme_minimal(legend.position = "none")
},
x = 0.58,
y = 0,
width = 0.46,
height = 0.46)
Fig7 %>%
ggdraw() +
draw_plot(
{
Fig7 +
coord_sf(
xlim = c(113, 115),
ylim = c(22, 23),
expand = FALSE) +
annotation_north_arrow(aes(location = "none")) +
annotation_scale(aes(location = "none")) +
theme_minimal(legend.position = "none")
},
x = 0.58,
y = 0,
width = 0.46,
height = 0.46)
Fig7 %>%
ggdraw() +
draw_plot(
{
ggplot(data = shpdata) +
geom_sf(data = shpsfort, fill = "white", color = "grey") +
geom_sf(aes(fill = quad_sig), color = "black") +
coord_sf(xlim = c(min(shpdatacoords[,'X']), max(shpdatacoords[,'X'])), ylim = c(min(shpdatacoords[,'Y']), max(shpdatacoords[,'Y'])),
datum = NA, expand = FALSE) +
scale_fill_manual(values = colors[labels %in% unique(shpdata$quad_sig)]) +
#geom_sf_label(data = shpdata[shpdata$quad_sig != "Not Significant" & shpdata$quad_sig != "Missing data", ],
#              aes(label = name),
#              label.size = NA,
#              fill = NA) +
theme_minimal()  +
coord_sf(
xlim = c(113, 115),
ylim = c(22, 23),
expand = FALSE)
},
x = 0.58,
y = 0,
width = 0.46,
height = 0.46)
Fig7 %>%
geom_rect(
xmin = 113,
ymin = 115,
xmax = 22,
ymax = 23,
fill = NA,
colour = "black",
size = 0.6
) +
ggdraw() +
draw_plot(
{
ggplot(data = shpdata) +
geom_sf(data = shpsfort, fill = "white", color = "grey") +
geom_sf(aes(fill = quad_sig), color = "black") +
coord_sf(xlim = c(min(shpdatacoords[,'X']), max(shpdatacoords[,'X'])), ylim = c(min(shpdatacoords[,'Y']), max(shpdatacoords[,'Y'])),
datum = NA, expand = FALSE) +
scale_fill_manual(values = colors[labels %in% unique(shpdata$quad_sig)]) +
#geom_sf_label(data = shpdata[shpdata$quad_sig != "Not Significant" & shpdata$quad_sig != "Missing data", ],
#              aes(label = name),
#              label.size = NA,
#              fill = NA) +
theme_minimal()  +
coord_sf(
xlim = c(113, 115),
ylim = c(22, 23),
expand = FALSE)
},
x = 0.58,
y = 0,
width = 0.46,
height = 0.46)
Fig7 %>%
geom_rect(
xmin = 113,
ymin = 115,
xmax = 22,
ymax = 23,
fill = NA,
colour = "black",
size = 0.6
) +
ggdraw() +
draw_plot(
{
ggplot(data = shpdata) +
geom_sf(data = shpsfort, fill = "white", color = "grey") +
geom_sf(aes(fill = quad_sig), color = "black") +
coord_sf(xlim = c(min(shpdatacoords[,'X']), max(shpdatacoords[,'X'])), ylim = c(min(shpdatacoords[,'Y']), max(shpdatacoords[,'Y'])),
datum = NA, expand = FALSE) +
scale_fill_manual(values = colors[labels %in% unique(shpdata$quad_sig)]) +
#geom_sf_label(data = shpdata[shpdata$quad_sig != "Not Significant" & shpdata$quad_sig != "Missing data", ],
#              aes(label = name),
#              label.size = NA,
#              fill = NA) +
theme_minimal()  +
coord_sf(
xlim = c(113, 115),
ylim = c(22, 23),
expand = FALSE)
},
x = 0.58,
y = 0,
width = 0.46,
height = 0.46)
Fig7 +
geom_rect(
xmin = 113,
ymin = 115,
xmax = 22,
ymax = 23,
fill = NA,
colour = "black",
size = 0.6
) %>%
ggdraw() +
draw_plot(
{
ggplot(data = shpdata) +
geom_sf(data = shpsfort, fill = "white", color = "grey") +
geom_sf(aes(fill = quad_sig), color = "black") +
coord_sf(xlim = c(min(shpdatacoords[,'X']), max(shpdatacoords[,'X'])), ylim = c(min(shpdatacoords[,'Y']), max(shpdatacoords[,'Y'])),
datum = NA, expand = FALSE) +
scale_fill_manual(values = colors[labels %in% unique(shpdata$quad_sig)]) +
#geom_sf_label(data = shpdata[shpdata$quad_sig != "Not Significant" & shpdata$quad_sig != "Missing data", ],
#              aes(label = name),
#              label.size = NA,
#              fill = NA) +
theme_minimal()  +
coord_sf(
xlim = c(113, 115),
ylim = c(22, 23),
expand = FALSE)
},
x = 0.58,
y = 0,
width = 0.46,
height = 0.46)
Fig7Zoom <- Fig7 +
geom_rect(
xmin = 113,
ymin = 115,
xmax = 22,
ymax = 23,
fill = NA,
colour = "black",
size = 0.6
)
Fig7Zoom
Fig7Zoom <- Fig7 +
geom_rect(
xmin = 113,
ymin = 22,
xmax = 115,
ymax = 23,
fill = NA,
colour = "black",
size = 0.6
)
Fig7Zoom
Fig7
View(Outbreaks)
### Packages ###
require("stringr")
require("tidyverse")
require("stringr")
require("rvest")
require("renv")
require("clock")
require("lubridate")
require("readxl")
require("plyr")
write.csv(Outbreaks, file = "Outbreaks.csv")
write.csv(Outbreaks, file = "Outbreaks.csv")
